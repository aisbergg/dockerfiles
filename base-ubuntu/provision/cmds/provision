#!/bin/bash
set -e

USAGE="Usage: provision [OPTIONS]

Execute the provision tasks and render the templates

Options:
  -h, --help           Show this help message and exit
"

# parse cli args
while [[ $# > 0 ]]; do
    case "$1" in
        -h|--help)
            echo "$USAGE"
            exit 0
            ;;
        *)
            echo "Unknown option '$1'"
            exit 1
            ;;
    esac
done

# turn Docker secrets into environment variables
if [[ -d /run/secrets ]]; then
    secret_vars=($(find /run/secrets -type f -exec basename {} \;))
    for s in "${secret_vars[@]}"; do
        export "$s=$(cat "/run/secrets/$s")"
    done
fi

# load environment variables from a file mounted inside the container
if [[ -f /etc/container_environment ]]; then
    source /etc/container_environment
fi

# execute provision tasks (bash or python)
print_info "Running provision tasks"
for t in /provision/tasks/*.{sh,py}; do
    test -r "$t" && . "$t" ${args[@]}
done

# render templates
if (($(find /provision/templates -type f -name '*.j2' | wc -l) > 0)); then
    print_info "Render templates"
    tempdir="$(mktemp -d)"
    templer --force \
        --dynamic-contextfiles \
        --defaults-type-check \
        -c  /provision/vars \
        /provision/templates \
        "$tempdir"
fi

# copy files to their destination in the filesystem, but skip files that
# are marked with "container_managed=false"
print_info "Copying files to their destination"
copy_autogenerated_files /provision/templates /
# same for freshly rendered files
if [[ -n "$tempdir" ]]; then
    copy_autogenerated_files "$tempdir" /
    rm -r "$tempdir"
    unset tempdir
fi

# execute post provision tasks (bash or python)
print_info "Running post provision tasks"
for t in /provision/post_tasks/*.{sh,py}; do
    test -r "$t" && . "$t" ${args[@]}
done

# remove secrets from env
for s in "${secret_vars[@]}"; do
    unset "$s"
done
unset secret_vars
