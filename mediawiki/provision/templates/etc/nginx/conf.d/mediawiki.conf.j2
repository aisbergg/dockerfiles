# container_managed=true                                                       #
#                                                                              #
# NOTE: by default this file is automatically generated on container startup.  #
# To disable the autogeneration simply change the first line of this file to   #
# 'container_managed=false'                                                    #
################################################################################

limit_conn_log_level    warn;
limit_req_zone          $limit zone=php:5m rate=60r/s;

{% if NGINX_REDIRECT_TO_FIRST_DOMAIN and DOMAINNAMES|length > 1 -%}
server {
    listen                      8080;
    listen                      [::]:8080;
    {% if NGINX_TLS_ENABLED -%}
    listen                      8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }};
    listen                      [::]:8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }};
    {%- endif %}
    server_name                 {% for domain in DOMAINNAMES %}{% if not loop.first %}{{ domain }} {% endif %}{% endfor %};

    location / {
        return 301              $real_scheme://{{ DOMAINNAMES[0] }}$request_uri;
    }
}
{%- endif %}

server {
    listen                      8080;
    listen                      [::]:8080;
    {% if NGINX_TLS_ENABLED -%}
    listen                      8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }};
    listen                      [::]:8443 ssl{{ ' http2' if NGINX_HTTP_VERSION == "2.0" else '' }};
    {%- endif %}
    {% if DOMAINNAMES|length > 0 -%}
    server_name                 {% if NGINX_REDIRECT_TO_FIRST_DOMAIN %}{{ DOMAINNAMES[0] }}{% else %}{% for domain in DOMAINNAMES %}{{ domain }} {% endfor %}{% endif %};
    {%- endif %}

    root                        /container/www;
    index                       index.php;

    {% if NGINX_REWRITE_HTTPS -%}
    if ($real_scheme != "https") {
        return 301              https://$host$request_uri;
    }
    {%- endif %}

    # expose the files under /w as well
    rewrite ^/w/(.*) /$1 last;

    # enable anti-cross-site scripting filter built into Internet Explorer,
    # Chrome and Safari
    #   see: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
    more_set_headers "X-XSS-Protection: 1; mode=block";

    location / {
        try_files $uri $uri/ @mediawiki;
    }

    location /rest.php {
        try_files $uri $uri/ /rest.php?$args;
    }

    location @mediawiki {
        {% if MEDIAWIKI_SHORT_URL_PATH != '' -%}
        rewrite ^/{{ MEDIAWIKI_SHORT_URL_PATH }}/(.*)$ /index.php?title=$1&$args last;
        rewrite ^/{{ MEDIAWIKI_SHORT_URL_PATH }} /index.php last;
        {%- endif %}
        rewrite ^/(.*)$ /index.php?title=$1&$args last;
    }

    # disable logging
    location = /robots.txt  { log_not_found off; }
    location = /favicon.ico { access_log off; log_not_found off; }

    # restrict access to dirs and files
    location ~ /\. { access_log off; log_not_found off; deny all; }
    {% if env.MEDIAWIKI_IS_INSTALLED == 'true' -%}
    location ^~ /mw-config/ { deny all; }
    {%- endif %}
    location ~ ^/(?:cache|docs|images/deleted|includes|maintenance|languages|serialized|tests)/ { {{ 'error_page 418 = @mediawiki; return 418;' if MEDIAWIKI_SHORT_URL_PATH == '' else 'deny all;' }} }
    location ~ ^/(?:UPGRADE|INSTALL|FAQ|RELEASE-NOTES-.*|README|COPYING|HISTORY|CREDITS) { {{ 'error_page 418 = @mediawiki; return 418;' if MEDIAWIKI_SHORT_URL_PATH == '' else 'deny all;' }} }
    location ~* ^/[^/]*\.(?:js|json|json-sample|md|sample|xml|lock) { {{ 'error_page 418 = @mediawiki; return 418;' if MEDIAWIKI_SHORT_URL_PATH == '' else 'deny all;' }} }
    location ~ ^/(?:includes)/ { internal; }

    # Force potentially-malicious files uploaded by the users to be served with
    # a text/plain mime type, to prevent them from being executed by the PHP
    # handler
    location ~* ^/(?:images)/.*\.(?:html|htm|shtml|php)$ {
        types { }
        default_type text/plain;
    }

    # pass PHP scripts to PHP-FPM
    location ~ \.php?$ {
        limit_req               zone=php burst=100;
        try_files               $uri =404;
        include                 fastcgi_params;
        fastcgi_read_timeout    {{ NGINX_FASTCGI_READ_TIMEOUT }};
        fastcgi_index           index.php;
        fastcgi_buffer_size     32k;
        fastcgi_buffers         16 16k;
        fastcgi_param           SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_pass            unix:/var/run/container/php7-fpm.sock;
    }

    # client caching
    location ~* \.(?:css|js|jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
        expires                 1M;
        more_set_headers        "Cache-Control: public, must-revalidate, proxy-revalidate";
        try_files               $uri @mediawiki;
    }
    location ~* \.(?:rss|atom)$ {
        expires                 1h;
        more_set_headers        "Cache-Control: public";
    }

    # redirect all requests for unknown URLs back to index.php in the root dir
    location ~ ^/images/ { try_files $uri /index.php; }
}
