; Enable OPcache module
zend_extension=opcache.so

; Determines if Zend OPCache is enabled
opcache.enable={{ OPCACHE_ENABLE }}

; Determines if Zend OPCache is enabled for the CLI version of PHP
opcache.enable_cli={{ OPCACHE_ENABLE_CLI }}

; The OPcache shared memory storage size.
opcache.memory_consumption={{ OPCACHE_MEMORY_CONSUMPTION }}

; The amount of memory for interned strings in Mbytes.
opcache.interned_strings_buffer={{ OPCACHE_INTERNED_STRINGS_BUFFER }}

; The maximum number of keys (scripts) in the OPcache hash table.
; Only numbers between 200 and 100000 are allowed.
opcache.max_accelerated_files={{ OPCACHE_MAX_ACCELERATED_FILES }}

; The maximum percentage of "wasted" memory until a restart is scheduled.
opcache.max_wasted_percentage={{ OPCACHE_MAX_WASTED_PERCENTAGE }}

; When this directive is enabled, the OPcache appends the current working
; directory to the script key, thus eliminating possible collisions between
; files with the same name (basename). Disabling the directive improves
; performance, but may break existing applications.
opcache.use_cwd={{ OPCACHE_USE_CWD }}

; When disabled, you must reset the OPcache manually or restart the
; webserver for changes to the filesystem to take effect.
opcache.validate_timestamps={{ OPCACHE_VALIDATE_TIMESTAMPS }}

; How often (in seconds) to check file timestamps for changes to the shared
; memory storage allocation. ("1" means validate once per second, but only
; once per request. "0" means always validate)
opcache.revalidate_freq={{ OPCACHE_REVALIDATE_FREQ }}

; Enables or disables file search in include_path optimization
opcache.revalidate_path={{ OPCACHE_REVALIDATE_PATH }}

; If disabled, all PHPDoc comments are dropped from the code to reduce the
; size of the optimized code.
opcache.save_comments={{ OPCACHE_SAVE_COMMENTS }}

; If enabled, a fast shutdown sequence is used for the accelerated code
; Depending on the used Memory Manager this may cause some incompatibilities.
opcache.fast_shutdown={{ OPCACHE_FAST_SHUTDOWN }}

; Allow file existence override (file_exists, etc.) performance feature.
opcache.enable_file_override={{ OPCACHE_ENABLE_FILE_OVERRIDE }}

; A bitmask, where each bit enables or disables the appropriate OPcache
; passes
opcache.optimization_level={{ OPCACHE_OPTIMIZATION_LEVEL }}

opcache.inherited_hack={{ OPCACHE_INHERITED_HACK }}
opcache.dups_fix={{ OPCACHE_DUPS_FIX }}

; The location of the OPcache blacklist file (wildcards allowed).
; Each OPcache blacklist file is a text file that holds the names of files
; that should not be accelerated. The file format is to add each filename
; to a new line. The filename may be a full path or just a file prefix
; (i.e., /var/www/x  blacklists all the files and directories in /var/www
; that start with 'x'). Line starting with a ; are ignored (comments).
opcache.blacklist_filename={{ OPCACHE_BLACKLIST_FILENAME }}

; Allows exclusion of large files from being cached. By default all files
; are cached.
opcache.max_file_size={{ OPCACHE_MAX_FILE_SIZE }}

; Check the cache checksum each N requests.
; The default value of "0" means that the checks are disabled.
opcache.consistency_checks={{ OPCACHE_CONSISTENCY_CHECKS }}

; How long to wait (in seconds) for a scheduled restart to begin if the cache
; is not being accessed.
opcache.force_restart_timeout={{ OPCACHE_FORCE_RESTART_TIMEOUT }}

; OPcache error_log file name. Empty string assumes "stderr".
opcache.error_log={{ OPCACHE_ERROR_LOG }}

; All OPcache errors go to the Web server log.
; By default, only fatal errors (level 0) or errors (level 1) are logged.
; You can also enable warnings (level 2), info messages (level 3) or
; debug messages (level 4).
opcache.log_verbosity_level={{ OPCACHE_LOG_VERBOSITY_LEVEL }}

; Preferred Shared Memory back-end. Leave empty and let the system decide.
opcache.preferred_memory_model={{ OPCACHE_PREFERRED_MEMORY_MODEL }}

; Protect the shared memory from unexpected writing during script execution.
; Useful for internal debugging only.
opcache.protect_memory={{ OPCACHE_PROTECT_MEMORY }}

; Allows calling OPcache API functions only from PHP scripts which path is
; started from specified string. The default "" means no restriction
opcache.restrict_api={{ OPCACHE_RESTRICT_API }}

; Mapping base of shared memory segments (for Windows only). All the PHP
; processes have to map shared memory into the same address space. This
; directive allows to manually fix the "Unable to reattach to base address"
; errors.
opcache.mmap_base={{ OPCACHE_MMAP_BASE }}

; Enables and sets the second level cache directory.
; It should improve performance when SHM memory is full, at server restart or
; SHM reset. The default "" disables file based caching.
opcache.file_cache={{ OPCACHE_FILE_CACHE }}

; Enables or disables opcode caching in shared memory.
opcache.file_cache_only={{ OPCACHE_FILE_CACHE_ONLY }}

; Enables or disables checksum validation when script loaded from file cache.
opcache.file_cache_consistency_checks={{ OPCACHE_FILE_CACHE_CONSISTENCY_CHECKS }}

; Implies opcache.file_cache_only=1 for a certain process that failed to
; reattach to the shared memory (for Windows only). Explicitly enabled file
; cache is required.
opcache.file_cache_fallback={{ OPCACHE_FILE_CACHE_FALLBACK }}

; Enables or disables copying of PHP code (text segment) into HUGE PAGES.
; This should improve performance, but requires appropriate OS configuration.
opcache.huge_code_pages={{ OPCACHE_HUGE_CODE_PAGES }}

; Validate cached file permissions.
opcache.validate_permission={{ OPCACHE_VALIDATE_PERMISSION }}

; Prevent name collisions in chroot'ed environment.
opcache.validate_root={{ OPCACHE_VALIDATE_ROOT }}
