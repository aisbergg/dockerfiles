# for more information see: http://php.net/manual/de/apcu.configuration.php

; Enable APCu extension module
extension=apcu.so

; This can be set to 0 to disable APCu
apc.enabled={{ APC_ENABLED }}

; Setting this enables APCu for the CLI version of PHP
; (Mostly for testing and debugging).
apc.enable_cli={{ APC_ENABLE_CLI }}

; The number of shared memory segments to allocate for the compiler cache.
; If APC is running out of shared memory but apc.shm_size is set as high as the
; system allows, raising this value might prevent APC from exhausting its memory.
apc.shm_segments={{ APC_SHM_SEGMENTS }}

; Sets the path to text files containing caches to load from disk upon
; initialization of APCu. preload_path should be a directory where each
; file follows $key.data where $key should be used as the entry name
; and the contents of the file contains serialized data to use as the value
; of the entry.
;apc.preload_path=

; The size of each shared memory segment, with M/G suffixe
apc.shm_size={{ APC_SHM_SIZE }}

; The number of seconds a cache entry is allowed to idle in a slot in case
; this cache entry slot is needed by another entry.
apc.ttl={{ APC_TTL }}

; The number of seconds that a cache entry may remain on the
; garbage-collection list.
apc.gc_ttl={{ APC_GC_TTL }}

; If you begin to get low on resources, an expunge of the cache
; is performed if it is less than half full. This is not always
; a suitable way of determining if an expunge of the cache
; should be per apc.smart allows you to set a runtime configuration
; value which is used to determine if an expunge should be run
; if (available_size < apc.smart * requested_size)
apc.smart=1

; A "hint" about the number variables expected in the cache.
; Set to zero or omit if you are not sure;
apc.entries_hint={{ APC_ENTRIES_HINT }}

; The mktemp-style file_mask to pass to the mmap module
apc.mmap_file_mask=/dev/zero

; On very busy servers whenever you start the server or
; modify files you can create a race of many processes
; all trying to cache the same data at the same time.
; By default, APCu attempts to prevent "slamming" of a key.
; A key is considered "slammed" if it was the last key set,
; and a context other than the current one set it ( ie. it
; was set by another process or thread )
apc.slam_defense={{ APC_SLAM_DEFENSE }}

; Defines which serializer should be used
; Default is the standard PHP serializer.
;apc.serializer='default'

; use the SAPI request start time for TTL
;apc.use_request_time=1

; Enables APCu handling of signals, such as SIGSEGV, that write core files
; when signaled. APCu will attempt to unmap the shared memory segment in
; order to exclude it from the core file
;apc.coredump_unmap=0


; RFC1867 File Upload Progress hook handler
;apc.rfc1867=0
;apc.rfc1867_prefix =upload_
;apc.rfc1867_name=APC_UPLOAD_PROGRESS
;apc.rfc1867_freq=0
;apc.rfc1867_ttl=3600
